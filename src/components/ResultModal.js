import React, { useEffect, useRef, useState } from 'react';
import './ResultModal.css';

const ResultModal = ({ result, quiz, onClose, onRestart }) => {
  const modalRef = useRef(null);
  const [isVisible, setIsVisible] = useState(false);
  const [showShareSuccess, setShowShareSuccess] = useState(false);
  const [progressAnimation, setProgressAnimation] = useState(0);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(true);
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressTimer = setTimeout(() => {
        setProgressAnimation(100);
      }, 500);
      return () => clearTimeout(progressTimer);
    }, 100);
    
    return () => clearTimeout(timer);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [onClose]);

  // –§–æ–∫—É—Å –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  useEffect(() => {
    if (modalRef.current) {
      modalRef.current.focus();
    }
  }, []);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const getCharacterIcon = (resultName) => {
    const iconMap = {
      '–ñ–µ–ª–µ–∑–Ω—ã–π –ß–µ–ª–æ–≤–µ–∫': 'ü¶æ',
      '–ö–∞–ø–∏—Ç–∞–Ω –ê–º–µ—Ä–∏–∫–∞': 'üõ°Ô∏è',
      '–ß–µ–ª–æ–≤–µ–∫-–ü–∞—É–∫': 'üï∑Ô∏è',
      '–¢–æ—Ä': '‚ö°',
      '–•–∞–ª–∫': 'üíö',
      '–ß–µ—Ä–Ω–∞—è –í–¥–æ–≤–∞': 'üï∏Ô∏è',
      '–î–æ–∫—Ç–æ—Ä –°—Ç—Ä—ç–Ω–¥–∂': 'üîÆ',
      '–ê–ª–∞—è –í–µ–¥—å–º–∞': 'üî¥',
      '–°–æ–∫–æ–ª–∏–Ω—ã–π –ì–ª–∞–∑': 'üèπ'
    };
    return iconMap[resultName] || 'ü¶∏';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  const getTraitIcon = (trait) => {
    const traitIcons = {
      '–ì–µ–Ω–∏–∞–ª—å–Ω—ã–π': 'üß†',
      '–•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π': '‚ú®',
      '–£–≤–µ—Ä–µ–Ω–Ω—ã–π': 'üí™',
      '–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–π': 'üîß',
      '–ß–µ—Å—Ç–Ω—ã–π': 'üíé',
      '–õ–∏–¥–µ—Ä': 'üëë',
      '–°–∞–º–æ–æ—Ç–≤–µ—Ä–∂–µ–Ω–Ω—ã–π': '‚ù§Ô∏è',
      '–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π': '‚öñÔ∏è',
      '–û—Å—Ç—Ä–æ—É–º–Ω—ã–π': 'üòÑ',
      '–õ–æ–≤–∫–∏–π': 'ü§∏',
      '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π': 'üìã',
      '–î–æ–±—Ä—ã–π': 'üåü',
      '–ú–æ–≥—É—á–∏–π': 'üí•',
      '–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π': 'üè∞',
      '–ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π': '‚ö°',
      '–ú–æ—â–Ω—ã–π': 'üí™',
      '–ù–µ—É–¥–µ—Ä–∂–∏–º—ã–π': 'üå™Ô∏è',
      '–ó–∞—â–∏—Ç–Ω–∏–∫': 'üõ°Ô∏è',
      '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π': 'üíñ',
      '–£–º–Ω–∞—è': 'üéì',
      '–°–∫—Ä—ã—Ç–Ω–∞—è': 'ü•∑',
      '–í–µ—Ä–Ω–∞—è': 'ü§ù',
      '–ú—É–¥—Ä—ã–π': 'üßô',
      '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π': 'üîÆ',
      '–†–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π': 'ü§î',
      '–ó–∞–≥–∞–¥–æ—á–Ω–∞—è': 'üåô',
      '–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è': 'üí´',
      '–¢–æ—á–Ω—ã–π': 'üéØ',
      '–ù–∞–¥–µ–∂–Ω—ã–π': 'üîí',
      '–°–∫—Ä–æ–º–Ω—ã–π': 'üôè',
      '–¢–∞–∫—Ç–∏—á–Ω—ã–π': '‚ôüÔ∏è'
    };
    return traitIcons[trait] || '‚≠ê';
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
  const handleShare = async () => {
    const shareText = `üéâ –Ø –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É "${quiz.title}" –∏ –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.title}!\n\n${result.description.substring(0, 100)}...\n\n–ü—Ä–æ–π–¥–∏ –∏ —Ç—ã: ${window.location.href}`;
    
    try {
      if (navigator.share && navigator.canShare) {
        await navigator.share({
          title: `${quiz.title} - ${result.title}`,
          text: shareText,
          url: window.location.href
        });
      } else {
        // Fallback - –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        await navigator.clipboard.writeText(shareText);
        setShowShareSuccess(true);
        setTimeout(() => setShowShareSuccess(false), 3000);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error);
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      try {
        const textArea = document.createElement('textarea');
        textArea.value = shareText;
        textArea.style.position = 'fixed';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        textArea.select();
        textArea.setSelectionRange(0, 99999);
        document.execCommand('copy');
        document.body.removeChild(textArea);
        setShowShareSuccess(true);
        setTimeout(() => setShowShareSuccess(false), 3000);
      } catch (fallbackError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç:', fallbackError);
      }
    }
  };

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
  const handleRestart = () => {
    onRestart();
    onClose();
  };

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
  const progressPercentage = Math.round(progressAnimation);
  const circumference = 2 * Math.PI * 45; // —Ä–∞–¥–∏—É—Å 45
  const strokeDashoffset = circumference - (progressAnimation / 100) * circumference;

  return (
    <div className={`modal-overlay ${isVisible ? 'visible' : ''}`} onClick={handleOverlayClick}>
      <div 
        className={`result-modal ${isVisible ? 'modal-enter' : ''}`}
        ref={modalRef}
        tabIndex={-1}
        role="dialog"
        aria-modal="true"
        aria-labelledby="result-title"
        aria-describedby="result-description"
      >
        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
        <button 
          className="modal-close-btn"
          onClick={onClose}
          aria-label="–ó–∞–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
          type="button"
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
          </svg>
        </button>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
        <div className="result-header">
          <div className="completion-circle">
            <svg className="progress-ring" width="120" height="120" viewBox="0 0 120 120">
              <circle
                className="progress-ring-bg"
                stroke="#E2E8F0"
                strokeWidth="8"
                fill="transparent"
                r="45"
                cx="60"
                cy="60"
              />
              <circle
                className="progress-ring-progress"
                stroke="url(#gradient)"
                strokeWidth="8"
                fill="transparent"
                r="45"
                cx="60"
                cy="60"
                strokeLinecap="round"
                strokeDasharray={circumference}
                strokeDashoffset={strokeDashoffset}
                style={{
                  transition: 'stroke-dashoffset 2s ease-in-out',
                  transform: 'rotate(-90deg)',
                  transformOrigin: '60px 60px'
                }}
              />
              <defs>
                <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                  <stop offset="0%" stopColor="#FF6B9D" />
                  <stop offset="50%" stopColor="#FF8FB1" />
                  <stop offset="100%" stopColor="#FFA8CC" />
                </linearGradient>
              </defs>
            </svg>
            <div className="progress-content">
              <div className="progress-percentage">{progressPercentage}%</div>
              <div className="progress-label">–ì–æ—Ç–æ–≤–æ!</div>
            </div>
          </div>

          <div className="result-badge">
            <span className="badge-icon">{getCharacterIcon(result.name)}</span>
            <span className="badge-text">–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</span>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
        <div className="result-content">
          <div className="result-title-section">
            <h2 id="result-title" className="result-title">
              {result.title}
            </h2>
            <div className="result-subtitle">
              {result.subtitle || `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç "${result.name}"`}
            </div>
          </div>

          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
          {result.image && (
            <div className="result-image-container">
              <img 
                src={result.image} 
                alt={result.name}
                className="result-image"
                onError={(e) => {
                  e.target.style.display = 'none';
                }}
              />
            </div>
          )}

          {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
          <div id="result-description" className="result-description">
            <p>{result.description}</p>
          </div>

          {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
          {result.traits && result.traits.length > 0 && (
            <div className="result-traits">
              <h3 className="traits-title">–¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h3>
              <div className="traits-grid">
                {result.traits.map((trait, index) => (
                  <div key={index} className="trait-card">
                    <span className="trait-icon">{getTraitIcon(trait)}</span>
                    <span className="trait-text">{trait}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã */}
          <div className="quiz-stats">
            <div className="stats-grid">
              <div className="stat-item">
                <span className="stat-icon">üìä</span>
                <div className="stat-content">
                  <span className="stat-label">–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</span>
                  <span className="stat-value">{quiz.title}</span>
                </div>
              </div>
              <div className="stat-item">
                <span className="stat-icon">‚ùì</span>
                <div className="stat-content">
                  <span className="stat-label">–í–æ–ø—Ä–æ—Å–æ–≤</span>
                  <span className="stat-value">{quiz.questionsCount}</span>
                </div>
              </div>
              <div className="stat-item">
                <span className="stat-icon">üéØ</span>
                <div className="stat-content">
                  <span className="stat-label">–†–µ–∑—É–ª—å—Ç–∞—Ç</span>
                  <span className="stat-value">{result.name}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className="result-actions">
          <button 
            className="action-btn primary-btn"
            onClick={handleShare}
            type="button"
          >
            <span className="btn-icon">üîó</span>
            <span className="btn-text">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º</span>
          </button>
          
          <div className="secondary-actions">
            <button 
              className="action-btn secondary-btn"
              onClick={handleRestart}
              type="button"
            >
              <span className="btn-icon">üîÑ</span>
              <span className="btn-text">–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞</span>
            </button>
            
            <button 
              className="action-btn outline-btn"
              onClick={onClose}
              type="button"
            >
              <span className="btn-icon">üìã</span>
              <span className="btn-text">–ö –∫–∞—Ç–∞–ª–æ–≥—É</span>
            </button>
          </div>
        </div>

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ */}
        {showShareSuccess && (
          <div className="share-notification">
            <div className="notification-content">
              <span className="notification-icon">‚úÖ</span>
              <span className="notification-text">–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ResultModal;